generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollment     Enrollment[]
  lessonProgress LessonProgress[]
  quizAttempts   QuizAttempt[]
  contentBlockProgress ContentBlockProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String
  price       Int
  duration    Int
  level       CourseLevel @default(Beginner)

  stripePriceId String @unique

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  chapter    Chapter[]
  enrollment Enrollment[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  lessons Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?  // Keep for backward compatibility
  position     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
  contentBlocks  ContentBlock[]
}

model ContentBlock {
  id String @id @default(uuid())

  type     ContentBlockType
  position Int
  content  Json // Flexible JSON field for different content types

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
}

enum ContentBlockType {
  VIDEO
  TEXT
  IMAGE
  QUIZ
  EXERCISE
  CODE_EXERCISE
  CODE
  PDF
  AUDIO
  DOWNLOAD
  FILL_IN_BLANK
  FLASHCARD
  MATCHING
  ORDERING
  DRAG_DROP
  TIMELINE
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id String @id @default(uuid())

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
}

model QuizAttempt {
  id String @id @default(uuid())

  contentBlockId String // Reference to the quiz content block
  selectedAnswers Json   // Array of selected option IDs
  isCorrect      Boolean
  score          Int     // Points earned
  timeSpent      Int?    // Time spent in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([contentBlockId, userId])
}

model ContentBlockProgress {
  id String @id @default(uuid())

  contentBlockId String
  type           ContentBlockType
  completed      Boolean          @default(false)
  
  // For quizzes: best score, attempts count, etc.
  metadata Json? // Flexible field for different progress types

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, contentBlockId])
}
